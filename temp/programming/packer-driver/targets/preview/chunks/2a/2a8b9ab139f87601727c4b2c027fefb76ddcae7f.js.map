{"version":3,"sources":["file:///Users/geminy/Desktop/mianshi2/assets/script/GridPanel.ts"],"names":["_decorator","Node","Sprite","instantiate","Color","Component","EditBox","ccclass","property","GridPanel","cells","colors","RED","YELLOW","BLUE","GREEN","CYAN","map","start","createBtn","on","EventType","TOUCH_END","onCreateBtnClick","item","active","length","i","ins","push","parent","content","x","parseInt","XEditBox","string","Number","isNaN","y","YEditBox","Array","j","index","top_color","left_color","weight_list","k","average","remain","w","Math","max","remain_lengh","filter","remain_average","result","getRandomIndex","node","getComponent","color","list","fields","random"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, UITransform, Label, Node, Sprite } from 'cc';\r\nimport { instantiate } from 'cc';\r\nimport { Color } from 'cc';\r\nimport { Component } from 'cc';\r\nimport { EditBox } from 'cc';\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GridPanel')\r\nexport class GridPanel extends Component {\r\n\r\n    @property(Node) content: Node;\r\n    @property(Node) item: Node;\r\n    @property(Node) createBtn: Node;\r\n\r\n    @property(EditBox) XEditBox: EditBox;\r\n    @property(EditBox) YEditBox: EditBox;\r\n\r\n    private cells: Node[] = []\r\n    private colors: Color[] = [Color.RED, Color.YELLOW, Color.BLUE, Color.GREEN, Color.CYAN]\r\n    private map: Array<number>\r\n\r\n\r\n    start () {\r\n        this.createBtn?.on(Node.EventType.TOUCH_END, this.onCreateBtnClick, this);\r\n        this.item.active = false\r\n    }\r\n\r\n    onCreateBtnClick () {\r\n        if (this.cells.length == 0) {\r\n            for (let i = 0; i < 100; i++) {\r\n                let ins = instantiate(this.item)\r\n                this.cells.push(ins)\r\n                ins.active = true\r\n                ins.parent = this.content\r\n            }\r\n        }\r\n\r\n\r\n        let x = parseInt(this.XEditBox.string)\r\n        x = Number.isNaN(x) ? 0 : x\r\n        let y = parseInt(this.YEditBox.string)\r\n        y = Number.isNaN(y) ? 0 : y\r\n\r\n        this.map = new Array<number>(100)\r\n        for (let i = 0; i < 10; i++) {\r\n            for (let j = 0; j < 10; j++) {\r\n                let index = i * 10 + j\r\n\r\n                let top_color: number = null\r\n                let left_color: number = null\r\n                if (i > 0) {\r\n                    top_color = this.map[(i - 1) * 10 + j]\r\n                }\r\n                if (j > 0) {\r\n                    left_color = this.map[i * 10 + j - 1]\r\n                }\r\n\r\n                let weight_list: number[] = []\r\n                for (let k = 0; k < 5; k++) {\r\n                    weight_list[k] = null\r\n                }\r\n\r\n                let average = 1 / 5\r\n                let remain = 1\r\n                //相同\r\n                if (top_color == left_color) {\r\n                    if (top_color != null) {\r\n                        let w = average + y / 100\r\n                        weight_list[top_color] = w\r\n                        remain -= w\r\n                    }\r\n                } else {\r\n                    if (top_color != null) {\r\n                        let w = average + x / 100\r\n                        weight_list[top_color] = w\r\n                        remain -= w\r\n                    }\r\n                    if (left_color != null) {\r\n                        let w = average + x / 100\r\n                        weight_list[left_color] = w\r\n                        remain -= w\r\n                    }\r\n                }\r\n                remain = Math.max(remain, 0)\r\n\r\n                let remain_lengh = weight_list.filter(x => x == null).length\r\n                let remain_average = remain / remain_lengh\r\n                for (let k = 0; k < weight_list.length; k++) {\r\n                    weight_list[k] = weight_list[k] == null ? remain_average : weight_list[k]\r\n                }\r\n\r\n\r\n                let result = this.getRandomIndex(weight_list)\r\n                this.map[index] = result\r\n                let node = this.cells[index]\r\n                node.getComponent(Sprite).color = this.colors[result]\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getRandomIndex (list: number[]): number {\r\n        let fields: number[] = []\r\n        for (let i = 0; i < list.length; i++) {\r\n            if (i == 0) {\r\n                fields[i] = list[i]\r\n            } else {\r\n                fields[i] = fields[i - 1] + list[i]\r\n            }\r\n        }\r\n\r\n\r\n        let random = Math.random() * fields[fields.length - 1]\r\n        for (let i = 0; i < fields.length; i++) {\r\n            if (random <= fields[i]) {\r\n                return i\r\n            }\r\n        }\r\n    }\r\n}"]}